// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity ^0.8.19;

import {BaseDiamond} from "./BaseDiamond.sol";
import {LibDiamond} from "./libraries/LibDiamond.sol";
import {IDiamondCut} from "./interfaces/IDiamondCut.sol";
import {IDiamondLoupe} from "./interfaces/IDiamondLoupe.sol";
import {IERC173} from "./interfaces/IERC173.sol";
//import { IERC165} from "./interfaces/IERC165.sol";

import {IERC1822Proxiable} from "@openzeppelin/contracts/interfaces/draft-IERC1822.sol";
// When no function exists for function called

struct CommunityInfo {
    uint256 fee;
    bool valid;
}

contract RegistryFactoryDiamond is BaseDiamond {
    /*|--------------------------------------------|*/
    /*|           CONSTANTS & IMMUTABLE            |*/
    /*|--------------------------------------------|*/
    string public constant VERSION = "0.0";
    /*|--------------------------------------------|*/
    /*|                 STORAGE                    |*/
    /*|--------------------------------------------|*/
    uint8 private _initialized; // slot 0
    bool private _initializing; // slot 0
    uint256[50] private __gap1; // slot 1-49
    address public _owner; // slot 50
    uint256[49] private __gap2; // slot 51-99
    uint256 public nonce; // slot 100

    mapping(address => CommunityInfo) communityToInfo; // slot 101
    address public gardensFeeReceiver; // slot 102
    address public registryCommunityTemplate; // slot 103
    address public strategyTemplate; // slot 152
    address public collateralVaultTemplate;
    uint256[50] private __gap3;
    /*|--------------------------------------------|*/
    /*|                 STORAGE                    |*/
    /*|--------------------------------------------|*/

    function createRegistry(RegistryCommunityInitializeParamsV0_0 memory params)
        public
        virtual
        returns (address _createdRegistryAddress)
    {
        params._nonce = nonce++;
        params._registryFactory = address(this);

        ERC1967Proxy proxy = new ERC1967Proxy(
            address(registryCommunityTemplate),
            abi.encodeWithSelector(
                RegistryCommunityV0_0.initialize.selector,
                params,
                strategyTemplate,
                collateralVaultTemplate,
                proxyOwner()
            )
        );
    }
}
