{
  "9fe2eb1aeb74653eafb5123a42de72883356078d1dfa172f41163ef1c2ff17d8": "query getFactories {\n  registryFactories {\n    id\n    registryCommunities {\n      id\n      chainId\n      isValid\n      communityName\n      covenantIpfsHash\n      covenant {\n        text\n      }\n      registerToken\n      alloAddress\n      members(first: 1000) {\n        memberAddress\n      }\n      strategies {\n        id\n        poolId\n        isEnabled\n        config {\n          id\n          decay\n          maxRatio\n          weight\n          minThresholdPoints\n        }\n      }\n    }\n  }\n}\n\nquery getTokenGardens {\n  tokenGardens {\n    id\n    chainId\n    name\n    symbol\n    decimals\n    totalBalance\n    communities {\n      id\n      chainId\n      covenantIpfsHash\n      covenant {\n        text\n      }\n      communityFee\n      isValid\n      communityName\n      strategies {\n        id\n      }\n      members(first: 1000) {\n        id\n        memberAddress\n      }\n    }\n  }\n}\n\nquery getMembersStrategy($strategyId: String!) {\n  memberStrategies(first: 1000, where: {strategy: $strategyId}) {\n    activatedPoints\n    member {\n      memberCommunity {\n        memberAddress\n        isRegistered\n      }\n    }\n    totalStakedPoints\n    id\n  }\n}\n\nquery getMemberStrategy($member_strategy: ID!) {\n  memberStrategy(id: $member_strategy) {\n    id\n    totalStakedPoints\n    activatedPoints\n    strategy {\n      id\n    }\n    member {\n      id\n    }\n  }\n}\n\nquery isMember($me: ID!, $comm: String!) {\n  member(id: $me) {\n    id\n    stakes {\n      id\n      amount\n      proposal {\n        id\n        proposalNumber\n        stakedAmount\n        proposalStatus\n        strategy {\n          id\n          poolId\n          registryCommunity {\n            id\n            isValid\n            garden {\n              id\n              symbol\n              decimals\n            }\n          }\n        }\n      }\n    }\n    memberCommunity(where: {registryCommunity_contains: $comm}) {\n      stakedTokens\n      isRegistered\n      registryCommunity {\n        id\n      }\n    }\n  }\n}\n\nquery getMember($me: ID!) {\n  member(id: $me) {\n    id\n    memberCommunity {\n      id\n      stakedTokens\n      isRegistered\n      registryCommunity {\n        id\n        isValid\n      }\n    }\n    stakes {\n      id\n      proposal {\n        proposalNumber\n        id\n      }\n      amount\n      createdAt\n    }\n  }\n}\n\nquery getPoolCreationData($communityAddr: ID!, $tokenAddr: ID!) {\n  tokenGarden(id: $tokenAddr) {\n    decimals\n    id\n    symbol\n  }\n  allos {\n    id\n  }\n  registryCommunity(id: $communityAddr) {\n    communityName\n    isValid\n  }\n}\n\nquery getProposalSupporters($proposalId: String!) {\n  members(first: 1000) {\n    id\n    stakes(where: {proposal: $proposalId}) {\n      amount\n      proposal {\n        proposalNumber\n        id\n      }\n    }\n  }\n}\n\nquery getGardenCommunities($chainId: BigInt!, $tokenGarden: ID!) {\n  registryCommunities(where: {chainId: $chainId, garden_: {id: $tokenGarden}}) {\n    id\n    garden {\n      id\n    }\n    chainId\n    isValid\n    covenantIpfsHash\n    covenant {\n      text\n    }\n    communityName\n    protocolFee\n    communityFee\n    registerToken\n    registerStakeAmount\n    alloAddress\n    members(first: 1000, where: {stakedTokens_gt: \"0\"}) {\n      id\n      memberAddress\n    }\n    strategies(where: {isEnabled: true}) {\n      id\n      totalEffectiveActivePoints\n      poolId\n    }\n  }\n}\n\nquery getCommunities {\n  registryCommunities(where: {isValid: true}) {\n    id\n    councilSafe\n    communityName\n    archived\n    garden {\n      address\n      chainId\n      symbol\n      name\n    }\n    strategies(where: {isEnabled: true}) {\n      id\n      totalEffectiveActivePoints\n      poolId\n    }\n    members(first: 1000, where: {stakedTokens_gt: \"0\"}) {\n      id\n      memberAddress\n    }\n  }\n}\n\nquery getCommunity($communityAddr: ID!, $tokenAddr: ID!) {\n  registryCommunity(id: $communityAddr) {\n    communityName\n    id\n    archived\n    members(\n      first: 1000\n      where: {stakedTokens_gt: \"0\"}\n      orderBy: stakedTokens\n      orderDirection: desc\n    ) {\n      memberAddress\n      stakedTokens\n    }\n    strategies(orderBy: poolId, orderDirection: desc) {\n      id\n      proposals {\n        id\n      }\n      archived\n      isEnabled\n      poolId\n      token\n      metadataHash\n      metadata {\n        title\n        description\n      }\n      config {\n        proposalType\n        pointSystem\n      }\n      proposals {\n        id\n      }\n    }\n    covenantIpfsHash\n    covenant {\n      text\n    }\n    communityFee\n    protocolFee\n    registerStakeAmount\n    registerToken\n    councilSafe\n  }\n  tokenGarden(id: $tokenAddr) {\n    symbol\n    decimals\n    id\n  }\n}\n\nquery getCommunityCreationData {\n  registryFactories {\n    id\n  }\n}\n\nquery getRegistryFactoryData {\n  registryFactories {\n    id\n    chainId\n  }\n}\n\nquery getPoolData($garden: ID!, $poolId: BigInt!) {\n  allos {\n    id\n    chainId\n    tokenNative\n  }\n  tokenGarden(id: $garden) {\n    address\n    name\n    symbol\n    description\n    totalBalance\n    ipfsCovenant\n    decimals\n  }\n  cvstrategies(where: {poolId: $poolId}) {\n    token\n    metadataHash\n    metadata {\n      title\n      description\n    }\n    id\n    poolId\n    totalEffectiveActivePoints\n    isEnabled\n    maxCVSupply\n    archived\n    sybil {\n      id\n      type\n    }\n    memberActive {\n      id\n    }\n    config {\n      id\n      weight\n      decay\n      maxAmount\n      maxRatio\n      minThresholdPoints\n      pointSystem\n      proposalType\n      allowlist\n      superfluidToken\n    }\n    registryCommunity {\n      id\n      councilSafe\n      isValid\n      garden {\n        id\n        symbol\n        decimals\n      }\n      members {\n        memberAddress\n      }\n    }\n    proposals(orderBy: createdAt, orderDirection: desc) {\n      id\n      proposalNumber\n      metadataHash\n      metadata {\n        title\n        description\n      }\n      beneficiary\n      requestedAmount\n      requestedToken\n      proposalStatus\n      stakedAmount\n      convictionLast\n      createdAt\n      blockLast\n      submitter\n      strategy {\n        id\n        maxCVSupply\n        totalEffectiveActivePoints\n      }\n    }\n  }\n  arbitrableConfigs(\n    first: 1\n    orderBy: version\n    orderDirection: desc\n    where: {strategy_: {poolId: $poolId}}\n  ) {\n    submitterCollateralAmount\n    challengerCollateralAmount\n    arbitrator\n    defaultRuling\n    defaultRulingTimeout\n    tribunalSafe\n  }\n}\n\nquery getProposalData($garden: ID!, $proposalId: ID!, $communityId: ID!) {\n  allos {\n    id\n    chainId\n    tokenNative\n  }\n  tokenGarden(id: $garden) {\n    name\n    symbol\n    decimals\n  }\n  registryCommunity(id: $communityId) {\n    councilSafe\n  }\n  cvproposal(id: $proposalId) {\n    id\n    proposalNumber\n    beneficiary\n    blockLast\n    convictionLast\n    createdAt\n    metadataHash\n    metadata {\n      title\n      description\n    }\n    proposalStatus\n    requestedAmount\n    requestedToken\n    stakedAmount\n    submitter\n    updatedAt\n    version\n    strategy {\n      id\n      token\n      maxCVSupply\n      totalEffectiveActivePoints\n      poolId\n      isEnabled\n      config {\n        proposalType\n        pointSystem\n        minThresholdPoints\n        decay\n      }\n    }\n    arbitrableConfig {\n      arbitrator\n      defaultRuling\n      defaultRulingTimeout\n      challengerCollateralAmount\n      submitterCollateralAmount\n      tribunalSafe\n    }\n  }\n}\n\nquery getAllo {\n  allos {\n    id\n    chainId\n    tokenNative\n  }\n}\n\nquery getStrategyByPool($poolId: BigInt!) {\n  cvstrategies(where: {poolId: $poolId}) {\n    id\n    poolId\n    totalEffectiveActivePoints\n    isEnabled\n    archived\n    config {\n      id\n      proposalType\n      pointSystem\n      minThresholdPoints\n    }\n    memberActive {\n      id\n    }\n    registryCommunity {\n      id\n      isValid\n      garden {\n        id\n        symbol\n        decimals\n      }\n    }\n    proposals {\n      id\n      proposalNumber\n      metadataHash\n      metadata {\n        title\n        description\n      }\n      beneficiary\n      requestedAmount\n      requestedToken\n      proposalStatus\n      stakedAmount\n    }\n  }\n}\n\nquery getTokenTitle($tokenAddr: ID!) {\n  tokenGarden(id: $tokenAddr) {\n    name\n  }\n}\n\nquery getCommunityTitles($communityAddr: ID!) {\n  registryCommunity(id: $communityAddr) {\n    communityName\n    garden {\n      name\n    }\n  }\n}\n\nquery getPoolTitles($poolId: BigInt!) {\n  cvstrategies(where: {poolId: $poolId}) {\n    poolId\n    metadataHash\n    metadata {\n      title\n      description\n    }\n    registryCommunity {\n      communityName\n      garden {\n        name\n      }\n    }\n  }\n}\n\nquery getProposalTitles($proposalId: ID!) {\n  cvproposal(id: $proposalId) {\n    proposalNumber\n    metadataHash\n    metadata {\n      title\n      description\n    }\n    strategy {\n      poolId\n      metadataHash\n      metadata {\n        title\n        description\n      }\n      registryCommunity {\n        communityName\n        garden {\n          name\n        }\n      }\n    }\n  }\n}\n\nquery getPassportStrategy($strategyId: ID!) {\n  passportStrategy(id: $strategyId) {\n    id\n    passportScorer {\n      id\n      type\n    }\n    threshold\n    councilSafe\n    active\n  }\n}\n\nquery getPassportUser($userId: ID!) {\n  passportUser(id: $userId) {\n    id\n    userAddress\n    score\n    lastUpdated\n  }\n}\n\nquery getGoodDollarStrategy($strategyId: ID!) {\n  goodDollarStrategy(id: $strategyId) {\n    id\n    sybilProtection {\n      id\n      type\n    }\n    councilSafe\n    active\n  }\n}\n\nquery getGoodDollarUser($userId: ID!) {\n  goodDollarUser(id: $userId) {\n    id\n    userAddress\n    verified\n    lastUpdated\n  }\n}\n\nquery getProposalDisputes($proposalId: ID!) {\n  proposalDisputes(where: {proposal_: {id: $proposalId}}) {\n    id\n    disputeId\n    status\n    challenger\n    context\n    metadata {\n      id\n      reason\n    }\n    createdAt\n    ruledAt\n    rulingOutcome\n  }\n}\n\nquery getArbitrableConfigs($strategyId: String!) {\n  arbitrableConfigs(where: {strategy: $strategyId}) {\n    arbitrator\n    challengerCollateralAmount\n    submitterCollateralAmount\n    tribunalSafe\n    defaultRuling\n    defaultRulingTimeout\n  }\n}\n\nquery getMemberPassportAndCommunities($memberId: ID!) {\n  member(id: $memberId) {\n    memberCommunity {\n      id\n    }\n  }\n  passportUser(id: $memberId) {\n    lastUpdated\n    score\n  }\n}\n\nquery getCommunityName($communityAddr: ID!) {\n  registryCommunity(id: $communityAddr) {\n    communityName\n  }\n}\n\nquery getPoolTitle($poolId: BigInt!) {\n  cvstrategies(first: 1, where: {poolId: $poolId}) {\n    metadata {\n      title\n    }\n    archived\n    isEnabled\n    config {\n      proposalType\n    }\n    registryCommunity {\n      communityName\n    }\n  }\n}\n\nquery getProposalTitle($proposalId: ID!) {\n  cvproposal(id: $proposalId) {\n    metadata {\n      title\n    }\n    proposalStatus\n    strategy {\n      metadata {\n        title\n      }\n      registryCommunity {\n        communityName\n      }\n      config {\n        proposalType\n      }\n    }\n  }\n}"
}