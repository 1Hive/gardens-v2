query getFactories {
  registryFactories {
    id
    registryCommunities {
      id
      chainId
      isValid
      communityName
      covenantIpfsHash
      covenant {
        text
      }
      registerToken
      alloAddress
      members(first: 1000) {
        memberAddress
      }
      strategies {
        id
        poolId
        isEnabled
        config {
          id
          decay
          maxRatio
          weight
          minThresholdPoints
        }
      }
    }
  }
}

query getTokenGardens {
  tokenGardens {
    id
    chainId
    name
    symbol
    decimals
    totalBalance
    communities {
      id
      chainId
      covenantIpfsHash
      covenant {
        text
      }
      communityFee
      isValid
      communityName
      strategies {
        id
      }
      members(first: 1000) {
        id
        memberAddress
      }
    }
  }
}

query getMembersStrategy($strategyId: String!) {
  memberStrategies(first: 1000, where: { strategy: $strategyId }) {
    activatedPoints
    member {
      memberCommunity {
        memberAddress
        isRegistered
      }
    }
    totalStakedPoints
    id
  }
}

query getMemberStrategy($member_strategy: ID!) {
  memberStrategy(id: $member_strategy) {
    id
    totalStakedPoints
    activatedPoints
    strategy {
      id
    }
    member {
      id
    }
  }
}

query isMember($me: ID!, $comm: String!) {
  member(id: $me) {
    id
    stakes {
      id
      amount
      proposal {
        id
        proposalNumber
        stakedAmount
        proposalStatus
        strategy {
          id
          poolId
          registryCommunity {
            id
            isValid
            garden {
              id
              symbol
              decimals
            }
          }
        }
      }
    }
    memberCommunity(where: { registryCommunity_contains: $comm }) {
      stakedTokens
      isRegistered
      registryCommunity {
        id
      }
    }
  }
}

query getMember($me: ID!) {
  member(id: $me) {
    id
    memberCommunity {
      id
      stakedTokens
      isRegistered
      registryCommunity {
        id
        isValid
      }
    }
    stakes {
      id
      proposal {
        proposalNumber
        id
      }
      amount
      createdAt
    }
  }
}

query getPoolCreationData($communityAddr: ID!, $tokenAddr: ID!) {
  tokenGarden(id: $tokenAddr) {
    decimals
    id
    symbol
  }
  allos {
    id
  }
  registryCommunity(id: $communityAddr) {
    communityName
    isValid
  }
}

query getProposalSupporters($proposalId: String!) {
  members(first: 1000) {
    id
    stakes(where: { proposal: $proposalId }) {
      amount
      proposal {
        proposalNumber
        id
      }
    }
  }
}

query getGardenCommunities($chainId: BigInt!, $tokenGarden: ID!) {
  registryCommunities(
    where: { chainId: $chainId, garden_: { id: $tokenGarden } }
  ) {
    id
    garden {
      id
    }
    chainId
    isValid
    covenantIpfsHash
    covenant {
      text
    }
    communityName
    protocolFee
    communityFee
    registerToken
    registerStakeAmount
    alloAddress
    members(first: 1000, where: { stakedTokens_gt: "0" }) {
      id
      memberAddress
    }
    strategies(where: { isEnabled: true }) {
      id
      totalEffectiveActivePoints
      poolId
    }
  }
}

query getCommunities {
  registryCommunities(where: { isValid: true }) {
    id
    councilSafe
    communityName
    archived
    garden {
      address
      chainId
      symbol
      name
    }
    strategies(where: { isEnabled: true }) {
      id
      totalEffectiveActivePoints
      poolId
    }
    members(first: 1000, where: { stakedTokens_gt: "0" }) {
      id
      memberAddress
    }
  }
}

query getCommunity($communityAddr: ID!, $tokenAddr: ID!) {
  registryCommunity(id: $communityAddr) {
    communityName
    id
    archived
    members(
      first: 1000
      where: { stakedTokens_gt: "0" }
      orderBy: stakedTokens
      orderDirection: desc
    ) {
      memberAddress
      stakedTokens
    }
    strategies(orderBy: poolId, orderDirection: desc) {
      id
      proposals {
        id
      }
      archived
      isEnabled
      poolId
      token
      metadataHash
      metadata {
        title
        description
      }
      config {
        proposalType
        pointSystem
      }
      proposals {
        id
      }
    }
    covenantIpfsHash
    covenant {
      text
    }
    communityFee
    protocolFee
    registerStakeAmount
    registerToken
    councilSafe
  }
  tokenGarden(id: $tokenAddr) {
    symbol
    decimals
    id
  }
}

query getCommunityCreationData {
  registryFactories {
    id
  }
}

query getRegistryFactoryData {
  registryFactories {
    id
    chainId
  }
}

query getPoolData($garden: ID!, $poolId: BigInt!) {
  allos {
    id
    chainId
    tokenNative
  }
  tokenGarden(id: $garden) {
    address
    name
    symbol
    description
    totalBalance
    ipfsCovenant
    decimals
  }
  cvstrategies(where: { poolId: $poolId }) {
    token
    metadataHash
    metadata {
      title
      description
    }
    id
    poolId
    totalEffectiveActivePoints
    isEnabled
    maxCVSupply
    archived
    sybil {
      id
      type
    }
    memberActive {
      id
    }
    config {
      id
      weight
      decay
      maxAmount
      maxRatio
      minThresholdPoints
      pointSystem
      proposalType
      allowlist
      superfluidToken
    }
    registryCommunity {
      id
      councilSafe
      isValid
      garden {
        id
        symbol
        decimals
      }
      members {
        memberAddress
      }
    }
    proposals(orderBy: createdAt, orderDirection: desc) {
      id
      proposalNumber
      metadataHash
      metadata {
        title
        description
      }
      beneficiary
      requestedAmount
      requestedToken
      proposalStatus
      stakedAmount
      convictionLast
      createdAt
      blockLast
      submitter
      strategy {
        id
        maxCVSupply
        totalEffectiveActivePoints
      }
    }
  }
  arbitrableConfigs(
    first: 1
    orderBy: version
    orderDirection: desc
    where: { strategy_: { poolId: $poolId } }
  ) {
    submitterCollateralAmount
    challengerCollateralAmount
    arbitrator
    defaultRuling
    defaultRulingTimeout
    tribunalSafe
  }
}

query getProposalData($garden: ID!, $proposalId: ID!, $communityId: ID!) {
  allos {
    id
    chainId
    tokenNative
  }
  tokenGarden(id: $garden) {
    name
    symbol
    decimals
  }
  registryCommunity(id: $communityId) {
    councilSafe
  }
  cvproposal(id: $proposalId) {
    id
    proposalNumber
    beneficiary
    blockLast
    convictionLast
    createdAt
    metadataHash
    metadata {
      title
      description
    }
    proposalStatus
    requestedAmount
    requestedToken
    stakedAmount
    submitter
    updatedAt
    version
    strategy {
      id
      token
      maxCVSupply
      totalEffectiveActivePoints
      poolId
      isEnabled
      config {
        proposalType
        pointSystem
        minThresholdPoints
        decay
      }
    }
    arbitrableConfig {
      arbitrator
      defaultRuling
      defaultRulingTimeout
      challengerCollateralAmount
      submitterCollateralAmount
      tribunalSafe
    }
  }
}

query getAllo {
  allos {
    id
    chainId
    tokenNative
  }
}

query getStrategyByPool($poolId: BigInt!) {
  cvstrategies(where: { poolId: $poolId }) {
    id
    poolId
    totalEffectiveActivePoints
    isEnabled
    archived
    config {
      id
      proposalType
      pointSystem
      minThresholdPoints
    }
    memberActive {
      id
    }
    registryCommunity {
      id
      isValid
      garden {
        id
        symbol
        decimals
      }
    }
    proposals {
      id
      proposalNumber
      metadataHash
      metadata {
        title
        description
      }
      beneficiary
      requestedAmount
      requestedToken
      proposalStatus
      stakedAmount
    }
  }
}

query getTokenTitle($tokenAddr: ID!) {
  tokenGarden(id: $tokenAddr) {
    name
  }
}

query getCommunityTitles($communityAddr: ID!) {
  registryCommunity(id: $communityAddr) {
    communityName
    garden {
      name
    }
  }
}

query getPoolTitles($poolId: BigInt!) {
  cvstrategies(where: { poolId: $poolId }) {
    poolId
    metadataHash
    metadata {
      title
      description
    }
    registryCommunity {
      communityName
      garden {
        name
      }
    }
  }
}

query getProposalTitles($proposalId: ID!) {
  cvproposal(id: $proposalId) {
    proposalNumber
    metadataHash
    metadata {
      title
      description
    }
    strategy {
      poolId
      metadataHash
      metadata {
        title
        description
      }
      registryCommunity {
        communityName
        garden {
          name
        }
      }
    }
  }
}

query getPassportStrategy($strategyId: ID!) {
  passportStrategy(id: $strategyId) {
    id
    passportScorer {
      id
      type
    }
    threshold
    councilSafe
    active
  }
}

query getPassportUser($userId: ID!) {
  passportUser(id: $userId) {
    id
    userAddress
    score
    lastUpdated
  }
}

query getGoodDollarStrategy($strategyId: ID!) {
  goodDollarStrategy(id: $strategyId) {
    id
    sybilProtection {
      id
      type
    }
    councilSafe
    active
  }
}

query getGoodDollarUser($userId: ID!) {
  goodDollarUser(id: $userId) {
    id
    userAddress
    verified
    lastUpdated
  }
}

query getProposalDisputes($proposalId: ID!) {
  proposalDisputes(where: { proposal_: { id: $proposalId } }) {
    id
    disputeId
    status
    challenger
    context
    metadata {
      id
      reason
    }
    createdAt
    ruledAt
    rulingOutcome
  }
}

query getArbitrableConfigs($strategyId: String!) {
  arbitrableConfigs(where: { strategy: $strategyId }) {
    arbitrator
    challengerCollateralAmount
    submitterCollateralAmount
    tribunalSafe
    defaultRuling
    defaultRulingTimeout
  }
}

query getMemberPassportAndCommunities($memberId: ID!) {
  member(id: $memberId) {
    memberCommunity {
      id
    }
  }
  passportUser(id: $memberId) {
    lastUpdated
    score
  }
}

# query getStrategyArbitrationConfig($strategyConfigId: ID!) {
#   cvstrategyConfig(id: $strategyConfigId) {
#     challengerCollateralAmount
#     submitterCollateralAmount
#     arbitrator
#     tribunalSafe
#     defaultRuling
#     defaultRulingTimeout
#   }
# }

query getCommunityName($communityAddr: ID!) {
  registryCommunity(id: $communityAddr) {
    communityName
  }
}

query getPoolTitle($poolId: BigInt!) {
  cvstrategies(first: 1, where: { poolId: $poolId }) {
    metadata {
      title
    }
  }
}

query getProposalTitle($proposalId: ID!) {
  cvproposal(id: $proposalId) {
    metadata {
      title
    }
  }
}
