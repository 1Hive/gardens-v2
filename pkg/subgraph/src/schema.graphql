type CVStrategy @entity(immutable: false) {
  id: ID!
  poolId: BigInt!
  poolAmount: BigInt!
  metadata: String
  registryCommunity: RegistryCommunity!
  config: CVStrategyConfig!
  proposals: [CVProposal!]! @derivedFrom(field: "strategy")
  memberActive: [Member!]
  maxCVSupply: BigInt!
  totalEffectiveActivePoints: BigInt!
  isEnabled: Boolean!
  token: String!
}

type CVStrategyConfig @entity(immutable: false) {
  id: ID!
  strategy: CVStrategy! @derivedFrom(field: "config")
  D: BigInt!
  decay: BigInt!
  maxRatio: BigInt!
  minThresholdPoints: BigInt!
  weight: BigInt!
  proposalType: BigInt!
  pointSystem: BigInt!
  maxAmount: BigInt

  # Arbitration Config
  arbitrator: String!
  tribunalSafe: String!
  challengerCollateralAmount: BigInt!
  submitterCollateralAmount: BigInt!
  defaultRuling: BigInt!
  defaultRulingTimeout: BigInt!
}

type CVProposal @entity(immutable: false) {
  id: ID!
  proposalNumber: BigInt!
  # proposalMeta: ProposalMeta!
  metadata: String!
  version: BigInt
  strategy: CVStrategy!
  beneficiary: String!
  requestedAmount: BigInt!
  requestedToken: String!
  proposalStatus: BigInt!
  blockLast: BigInt!
  convictionLast: BigInt!
  threshold: BigInt!
  maxCVStaked: BigInt!
  # proposalType: BigInt!
  stakedAmount: BigInt!
  submitter: String!
  # voterStakedPointsPct: BigInt!
  # agreementActionId: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

# type ProposalMeta @entity(immutable: false) {
#   id: ID!
#   proposal: [CVProposal!]! @derivedFrom(field: "proposalMeta")
#   version: BigInt
#   title: String
#   content: String
# }

type RegistryFactory @entity(immutable: false) {
  id: ID!
  chainId: BigInt!
  registryCommunities: [RegistryCommunity!]
    @derivedFrom(field: "registryFactory")
}
type RegistryCommunity @entity(immutable: false) {
  id: ID!
  chainId: BigInt!
  strategyTemplate: String!
  profileId: String
  communityFee: BigInt!
  protocolFee: BigInt!
  communityName: String
  covenantIpfsHash: String
  registryFactory: RegistryFactory
  strategies: [CVStrategy!] @derivedFrom(field: "registryCommunity")
  councilSafe: String
  isKickEnabled: Boolean
  registerStakeAmount: BigInt
  registerToken: String
  alloAddress: String
  members: [MemberCommunity!] @derivedFrom(field: "registryCommunity")
  # members: [Member!] @derivedFrom(field: "registryCommunity")
  garden: TokenGarden!
  isValid: Boolean!
}

type Member @entity(immutable: false) {
  id: ID!
  # registryCommunity: [RegistryCommunity!]
  memberCommunity: [MemberCommunity!] @derivedFrom(field: "member")
  stakes: [Stake!] @derivedFrom(field: "member")
  # isRegistered: Boolean
}

type Stake @entity {
  id: ID!
  member: Member!
  poolId: BigInt!
  proposal: CVProposal!
  amount: BigInt!
  createdAt: BigInt!
}

type MemberCommunity @entity(immutable: false) {
  id: ID!
  memberAddress: String
  stakedTokens: BigInt
  isRegistered: Boolean
  member: Member!
  registryCommunity: RegistryCommunity!
}

type MemberStrategy @entity(immutable: false) {
  id: ID!
  member: Member!
  strategy: CVStrategy!
  totalStakedPoints: BigInt!
  activatedPoints: BigInt
}

type TokenGarden @entity(immutable: false) {
  id: ID!
  name: String!
  description: String
  chainId: BigInt!
  totalBalance: BigInt!
  ipfsCovenant: String
  symbol: String!
  decimals: BigInt!
  address: String!
  communities: [RegistryCommunity!] @derivedFrom(field: "garden")
}

type Allo @entity(immutable: false) {
  id: ID!
  chainId: BigInt!
  tokenNative: String!
}

type PassportScorer @entity(immutable: false) {
  id: ID!
  strategies: [PassportStrategy!] @derivedFrom(field: "passportScorer")
  users: [PassportUser!] @derivedFrom(field: "passportScorer")
}

type PassportStrategy @entity(immutable: false) {
  id: ID!
  passportScorer: PassportScorer!
  strategy: CVStrategy!
  threshold: BigInt!
  councilSafe: String!
  active: Boolean!
}

type PassportUser @entity(immutable: false) {
  id: ID!
  passportScorer: PassportScorer!
  userAddress: String!
  score: BigInt!
  lastUpdated: BigInt!
}

type ProposalDispute @entity(immutable: false) {
  id: ID!
  createdAt: BigInt!
  disputeId: BigInt!
  proposal: CVProposal!
  status: BigInt!
  challenger: String!
  context: String!
  metadata: ProposalDisputeMetadata

  # When ruled
  rulingOutcome: BigInt
  ruledAt: BigInt
}

type ProposalDisputeMetadata @entity(immutable: false) {
  id: ID!
  reason: String!
}
